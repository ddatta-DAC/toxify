from itertools import groupby

def fasta_iter(fasta_name):
    fh = open(fasta_name)
    faiter = (x[1] for x in groupby(fh, lambda line: line[0] == ">"))
    for header in faiter:
        headerStr = header.__next__()[1:].strip().split()[0]#Entire line, add .split[0] for just first column
        seq = "".join(s.strip() for s in faiter.__next__())
        yield (headerStr, seq)
SAMPLES, = glob_wildcards("{sample}.fa")


rule final:
    # input: expand("{sample}.blastout",sample=SAMPLES)
    input: dynamic("{header}.aln")

rule diamond:
    input:
        expand("{sample}.fa",sample=SAMPLES)
    output:
        expand("{sample}.blastout",sample=SAMPLES)
    threads:100
    shell:
        "diamond blastp -d /home/brewerlab/nr_database/diamond_db.dmnd -q {input} -o {output} -p {threads}   -f 6 sseqid sseq qseqid qseq  -k 1000 --unal 1"
rule blast2fa:
    input:
        expand("{sample}.blastout",sample=SAMPLES),
        expand("{sample}.fa",sample=SAMPLES)
    output:
        dynamic("{header}.fasta")
    run:

        qdict = {}
        for ff in fasta_iter(input[1]):
            headerStr, seq = ff
            qdict[headerStr] = seq

        used_dict = {}

        with open(input[0]) as f:
            for line in f:


                row = line.split()
                with open(row[2].replace("|","_")+".fasta","a") as out:
                    if row[2] not in used_dict:
                        used_dict[row[2]] = True
                        out.write(">"+row[2]+"\n")
                        out.write(qdict[row[2]]+"\n")
                    out.write(">"+row[0]+"\n")
                    out.write(row[1]+"\n")
rule mafft:
    input:
        "{header}.fasta"
    output:
        "{header}.aln"
    shell:
        "mafft --auto -t -1 {input} > {output}"
rule align2pssm:
    input:
        "{header}.aln"
    output:
        "{header}.pssm"
    run:
        line1 = True

        qseq = {}
        sseq = { "A":{},
                "C":{},
                "D":{},
                "E":{},
                "F":{},
                "G":{},
                "H":{},
                "I":{},
                "K":{},
                "L":{},
                "M":{},
                "N":{},
                "P":{},
                "Q":{},
                "R":{},
                "S":{},
                "T":{},
                "V":{},
                "W":{},
                "Y":{}

        }
        for ff in fasta_iter("test.blast.aln"):
            headerStr, seq = ff
            if line1:
                for num in range(len(seq)):
                    if seq[num] != "-":
                        qseq[num] = seq[num]
                line1 = False
            else:
                for num in range(len(seq)):
                    if num in qseq:
                        if seq[num] != "-":
                            try:

                                try:
                                    sseq[seq[num]][num] +=1
                                except:
                                    sseq[seq[num]][num] = 1
                            except:
                                0
                            # print(seq[num],num)
                            # print(sseq[seq[num]])


        # print(qseq)
        # print(sseq)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)
        # print(1000000)


        print("\t", end="")
        for i in sorted(qseq.keys()):
            print(qseq[i]+"\t", end="")

        print()
        # for i in sorted(sseq.keys()):
        #     print(str(i)+"\t", end="")
        #     for j in sorted(sseq[i].keys()):
        #         print(str(j)+"\t", end="")
        #     print()

        for i in sseq:
            print(i+"\t",end="")
            for j in sorted(qseq.keys()):
                try:
                    print(str(sseq[i][j])+"\t",end="")
                except:
                    print("0\t",end="")
            print()
